# int leaf_example (int g, int h, int i, int j)
# {
#   int f;
#   f = (g + h) â€“ (i + j);
#   return f;
# }
.data

MSG1:  .asciiz "Give values of g,h,i,j to find value of (g+h)-(i+j)\n" 
MSG2:  .asciiz "Answer -> "
.text
.globl main

main:
      lui   $s0, 0x1001
      j     take_input
load:
      lw		$a0, 0($s0)		 # Loading g
      lw    $a1, 4($s0)              # Loading h
      lw    $a2, 8($s0)              # Loading i
      lw    $a3, 12($s0)             # Loading j
      jal		leaf_example	 # jump to leaf_example and save position to $ra
      move 	$s1, $v0		       # storing value in other register
      sw		$s1, 16($s0)       # storing back the result value
      jal		print			 # jump to print and save position to $ra
      addi	$v0, $zero, 10		 # $v0 = $t1 + 0
      syscall
      

leaf_example: 
      # though t0,t1,t2 are not used, just for practice we are doing it
      addi  $sp, $sp, -12			# $sp = $sp - 12 , decrementing stack pointer
      sw		$t0, 0($sp)		      # temp store value of registers
      sw    $t1, 4($sp)                   # temp store value of registers
      sw    $t2, 8($sp)                   # temp store value of registers
      add   $t0, $a0 , $a1                # g+h
      add   $t1, $a2 , $a3                # i+j
      sub		$t2, $t0, $t1		# (g+h)-(i+j)
      move 	$v0, $t2		            # $v0 = $t2
      lw    $t0, 0($sp)                   # loading back the old values
      lw    $t1, 4($sp)                   # loading back the old values
      lw    $t2, 8($sp)                   # loading back the old values
      addi  $sp , $sp , 12                # increasing the stack pointer to normal
      jr		$ra				# jump to $ra(return)
      

print:
      li   $v0 , 4
      la   $a0 , MSG2
      syscall
      li		$v0 , 1
      move  $a0 , $s1
      syscall
      jr		$ra				# jump to $ra
      
      
      
take_input:
      li   $v0 , 4
      la   $a0 , MSG1
      syscall
      li   $v0 , 5                        # input taking and storing back
      syscall 
      sw		$v0, 0($s0)	
      li   $v0 , 5	     
      syscall
      sw		$v0, 4($s0)
      li   $v0 , 5		     
      syscall
      sw		$v0, 8($s0)
      li   $v0 , 5		     
      syscall
      sw		$v0, 12($s0)		      
      j     load